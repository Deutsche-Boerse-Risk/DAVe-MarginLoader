package com.deutscheboerse.risk.dave;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.Appender;
import com.deutscheboerse.risk.dave.log.TestAppender;
import com.deutscheboerse.risk.dave.model.*;
import com.deutscheboerse.risk.dave.persistence.CircuitBreakerPersistenceService;
import com.deutscheboerse.risk.dave.persistence.CountdownPersistenceService;
import com.deutscheboerse.risk.dave.persistence.ErrorPersistenceService;
import com.deutscheboerse.risk.dave.persistence.PersistenceService;
import com.deutscheboerse.risk.dave.utils.*;
import io.vertx.core.DeploymentOptions;
import io.vertx.core.Vertx;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.serviceproxy.ProxyHelper;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;

@RunWith(VertxUnitRunner.class)
public class AMQPVerticleIT {
    private final TestAppender testAppender = TestAppender.getAppender(AMQPVerticle.class);
    private final Logger rootLogger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
    private Vertx vertx;

    @Before
    public void setUp() {
        this.vertx = Vertx.vertx();
        rootLogger.addAppender(testAppender);
    }

    @After
    public void cleanup(TestContext context) {
        this.vertx.close(context.asyncAssertSuccess());
        rootLogger.detachAppender(testAppender);
    }

    @Test
    public void testConnectionSuccess(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        // Catch log messages generated by AccountMarginVerticle
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "AccountMarginVerticle connected to the broker");
        testAppender.stop();
    }

    @Test
    public void testConnectionFailure(TestContext context) throws InterruptedException {
        JsonObject config = TestConfig.getAmqpConfig();
        config.put("listeners", new JsonObject()
                .put("accountMargin", "nonexisting"));
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(config);

        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "AccountMarginVerticle failed to connect");
        testAppender.stop();
    }

    @Test
    public void testCreateReceiverFailure(TestContext context) throws InterruptedException {
        JsonObject config = TestConfig.getAmqpConfig();
        config.put("hostname", "nonexisting")
                .put("reconnectAttempts", 0);
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(config);

        // Catch log messages generated by AccountMarginVerticle
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "AccountMarginVerticle failed to connect");
        testAppender.stop();
    }

    @Test
    public void testMissingGPBHeaderError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        BrokerFiller brokerFiller = new BrokerFillerMissingHeader(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "Message header is missing for message - ignoring it");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }

    @Test
    public void testWrongGPBBodyError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        BrokerFiller brokerFiller = new BrokerFillerWrongBody(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "Incoming message's body is not a 'data' type, skipping ... ");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }

    @Test
    public void testUnableDecodeGPBError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        BrokerFiller brokerFiller = new BrokerFillerInvalidProtocol(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "Unable to decode GPB message");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }


    @Test
    public void testUnknownGPBExtensionError(TestContext context) throws InterruptedException {
        // Setup account margin to listen on incorrect queue
        JsonObject config = TestConfig.getAmqpConfig();
        config.getJsonObject("listeners").put("accountMargin", "broadcast.PRISMA_BRIDGE.PRISMA_TTSAVELiquiGroupMargin");
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(config);

        // Fill in the incorrect queue PRISMA_TTSAVELiquiGroupMargin
        BrokerFiller brokerFiller = new BrokerFillerCorrectData(this.vertx);
        brokerFiller.setUpLiquiGroupMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        int msgCount = DataHelper.getJsonObjectCount("liquiGroupMargin", 1);
        testAppender.waitForMessageCount(Level.ERROR, msgCount);
        testAppender.waitForMessageContains(Level.ERROR, "Unknown extension (should be account_margin)");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }

    @Test
    public void testUnableCreateDataModelError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        BrokerFiller brokerFiller = new BrokerFillerMissingField(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        int msgCount = DataHelper.getJsonObjectCount("accountMargin", 1);
        testAppender.waitForMessageCount(Level.ERROR, msgCount);
        testAppender.waitForMessageContains(Level.ERROR, "Unable to create Data Model from GPB data");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }


    @Test
    public void testMessageStoreError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        ErrorPersistenceService persistenceService = new ErrorPersistenceService();
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        BrokerFiller brokerFiller = new BrokerFillerCorrectData(vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        // Catch log messages generated by AccountMarginVerticle
        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        int msgCount = DataHelper.getJsonObjectCount("accountMargin", 1);
        testAppender.waitForMessageContains(Level.ERROR, "Unable to store message", msgCount);
        testAppender.waitForMessageContains(Level.WARN, "Message released");
        testAppender.stop();
        rootLogger.addAppender(stdout);

        brokerFiller.drainAccountMarginQueue(context.async(1), context.asyncAssertSuccess());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testCircuitBreaker(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        final int msgCount = DataHelper.getJsonObjectCount("accountMargin", 1);
        Async async = context.async(msgCount);

        PersistenceService persistenceService = new CircuitBreakerPersistenceService(async, msgCount);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        BrokerFiller brokerFiller = new BrokerFillerCorrectData(vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.WARN, "Open circuit");
        testAppender.waitForMessageContains(Level.WARN, "Message released");
        testAppender.waitForMessageContains(Level.WARN, "Half open circuit");
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.waitForMessageContains(Level.WARN, "Close circuit");
        testAppender.stop();
        rootLogger.addAppender(stdout);

        async.awaitSuccess(30000);

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testAccountMarginVerticle(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());
        // we expect 1704 messages to be received
        int msgCount = DataHelper.getJsonObjectCount("accountMargin", 1);
        Async async = context.async(msgCount);

        // Setup persistence persistence
        CountdownPersistenceService persistenceService = new CountdownPersistenceService(async);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        BrokerFiller brokerFiller = new BrokerFillerCorrectData(vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        async.awaitSuccess(30000);

        // verify the content of the last message
        JsonObject jsonData = DataHelper.getLastJsonFromFile("accountMargin", 1).orElse(new JsonObject());
        AccountMarginModel expected = new AccountMarginModel(jsonData);
        context.assertEquals(expected, persistenceService.getLastMessage());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testLiquiGroupMarginVerticle(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());
        // we expect 2171 messages to be received
        int msgCount = DataHelper.getJsonObjectCount("liquiGroupMargin", 1);
        Async async = context.async(msgCount);

        // Setup persistence persistence
        CountdownPersistenceService persistenceService = new CountdownPersistenceService(async);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        final BrokerFiller brokerFiller = new BrokerFillerCorrectData(this.vertx);
        brokerFiller.setUpLiquiGroupMarginQueue(context.asyncAssertSuccess());

        testAppender.start();
        vertx.deployVerticle(LiquiGroupMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        async.awaitSuccess(30000);

        // verify the content of the last message
        JsonObject jsonData = DataHelper.getLastJsonFromFile("liquiGroupMargin", 1).orElse(new JsonObject());
        LiquiGroupMarginModel expected = new LiquiGroupMarginModel(jsonData);
        context.assertEquals(expected, persistenceService.getLastMessage());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testLiquiGroupSplitMarginVerticle(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());
        // we expect 2472 messages to be received
        int msgCount = DataHelper.getJsonObjectCount("liquiGroupSplitMargin", 1);
        Async async = context.async(msgCount);

        // Setup persistence persistence
        CountdownPersistenceService persistenceService = new CountdownPersistenceService(async);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        final BrokerFiller brokerFiller = new BrokerFillerCorrectData(this.vertx);
        brokerFiller.setUpLiquiGroupSplitMarginQueue(context.asyncAssertSuccess());

        testAppender.start();
        vertx.deployVerticle(LiquiGroupSplitMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        async.awaitSuccess(30000);

        JsonObject jsonData = DataHelper.getLastJsonFromFile("liquiGroupSplitMargin", 1).orElse(new JsonObject());
        LiquiGroupSplitMarginModel expected = new LiquiGroupSplitMarginModel(jsonData);
        context.assertEquals(expected, persistenceService.getLastMessage());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testPoolMarginVerticle(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());
        // we expect 270 messages to be received
        int msgCount = DataHelper.getJsonObjectCount("poolMargin", 1);
        Async async = context.async(msgCount);

        // Setup persistence persistence
        CountdownPersistenceService persistenceService = new CountdownPersistenceService(async);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        final BrokerFiller brokerFiller = new BrokerFillerCorrectData(this.vertx);
        brokerFiller.setUpPoolMarginQueue(context.asyncAssertSuccess());

        testAppender.start();
        vertx.deployVerticle(PoolMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        async.awaitSuccess(30000);

        JsonObject jsonData = DataHelper.getLastJsonFromFile("poolMargin", 1).orElse(new JsonObject());
        PoolMarginModel expected = new PoolMarginModel(jsonData);
        context.assertEquals(expected, persistenceService.getLastMessage());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testPositionReportVerticle(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());
        // we expect 3596 messages to be received
        int msgCount = DataHelper.getJsonObjectCount("positionReport", 1);
        Async async = context.async(msgCount);

        // Setup persistence persistence
        CountdownPersistenceService persistenceService = new CountdownPersistenceService(async);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        final BrokerFiller brokerFiller = new BrokerFillerCorrectData(this.vertx);
        brokerFiller.setUpPositionReportQueue(context.asyncAssertSuccess());

        testAppender.start();
        vertx.deployVerticle(PositionReportVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        async.awaitSuccess(30000);

        JsonObject jsonData = DataHelper.getLastJsonFromFile("positionReport", 1).orElse(new JsonObject());
        PositionReportModel expected = new PositionReportModel(jsonData);
        context.assertEquals(expected, persistenceService.getLastMessage());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testRiskLimitUtilizationVerticle(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());
        // we expect 2 messages to be received
        int msgCount = DataHelper.getJsonObjectCount("riskLimitUtilization", 1);
        Async async = context.async(msgCount);

        // Setup persistence persistence
        CountdownPersistenceService persistenceService = new CountdownPersistenceService(async);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        final BrokerFiller brokerFiller = new BrokerFillerCorrectData(this.vertx);
        brokerFiller.setUpRiskLimitUtilizationQueue(context.asyncAssertSuccess());

        testAppender.start();
        vertx.deployVerticle(RiskLimitUtilizationVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        async.awaitSuccess(30000);

        JsonObject jsonData = DataHelper.getLastJsonFromFile("riskLimitUtilization", 1).orElse(new JsonObject());
        RiskLimitUtilizationModel expected = new RiskLimitUtilizationModel(jsonData);
        context.assertEquals(expected, persistenceService.getLastMessage());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }
}