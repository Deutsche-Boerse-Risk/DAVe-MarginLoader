package com.deutscheboerse.risk.dave;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.Appender;
import com.deutscheboerse.risk.dave.log.TestAppender;
import com.deutscheboerse.risk.dave.model.*;
import com.deutscheboerse.risk.dave.persistence.*;
import com.deutscheboerse.risk.dave.utils.*;
import com.google.protobuf.MessageLite;
import io.vertx.core.AsyncResult;
import io.vertx.core.DeploymentOptions;
import io.vertx.core.Handler;
import io.vertx.core.Vertx;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.serviceproxy.ProxyHelper;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;

import java.util.function.Consumer;
import java.util.function.Function;

@RunWith(VertxUnitRunner.class)
public class AMQPVerticleIT {
    private final TestAppender testAppender = TestAppender.getAppender(AMQPVerticle.class);
    private final Logger rootLogger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
    private Vertx vertx;

    @Before
    public void setUp() {
        this.vertx = Vertx.vertx();
        rootLogger.addAppender(testAppender);
    }

    @After
    public void cleanup(TestContext context) {
        this.vertx.close(context.asyncAssertSuccess());
        rootLogger.detachAppender(testAppender);
    }

    @Test
    public void testConnectionSuccess(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        // Catch log messages generated by AccountMarginVerticle
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "AccountMarginVerticle connected to the broker");
        testAppender.stop();
    }

    @Test
    public void testConnectionFailure(TestContext context) throws InterruptedException {
        JsonObject config = TestConfig.getAmqpConfig();
        config.put("listeners", new JsonObject()
                .put("accountMargin", "nonexisting"));
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(config);

        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "AccountMarginVerticle failed to connect");
        testAppender.stop();
    }

    @Test
    public void testCreateReceiverFailure(TestContext context) throws InterruptedException {
        JsonObject config = TestConfig.getAmqpConfig();
        config.put("hostname", "nonexisting")
                .put("reconnectAttempts", 0);
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(config);

        // Catch log messages generated by AccountMarginVerticle
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "AccountMarginVerticle failed to connect");
        testAppender.stop();
    }

    @Test
    public void testMissingGPBHeaderError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        BrokerFiller brokerFiller = new BrokerFillerMissingHeader(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "Message header is missing for message - ignoring it");
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }

    @Test
    public void testWrongGPBBodyError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        BrokerFiller brokerFiller = new BrokerFillerWrongBody(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "Incoming message's body is not a 'data' type, skipping ... ");
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }

    @Test
    public void testUnableDecodeGPBError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        BrokerFiller brokerFiller = new BrokerFillerInvalidProtocol(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "Unable to decode GPB message");
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        rootLogger.addAppender(stdout);
    }


    @Test
    public void testUnknownGPBExtensionError(TestContext context) throws InterruptedException {
        // Setup account margin to listen on incorrect queue
        JsonObject config = TestConfig.getAmqpConfig();
        config.getJsonObject("listeners").put("accountMargin", "broadcast.DAVE.PRISMA_DAVELiquiGroupMargin");
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(config);

        PersistenceService persistenceService = new SuccessPersistenceService(this.vertx);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the incorrect queue PRISMA_TTSAVELiquiGroupMargin
        BrokerFiller brokerFiller = new BrokerFillerCorrectData(this.vertx);
        brokerFiller.setUpLiquiGroupMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        int msgCount = DataHelper.getJsonObjectCount("liquiGroupMargin", 1);
        testAppender.waitForMessageCount(Level.ERROR, msgCount);
        testAppender.waitForMessageContains(Level.ERROR, "Unknown extension (should be account_margin)");
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        rootLogger.addAppender(stdout);

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testUnableCreateDataModelError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        PersistenceService persistenceService = new SuccessPersistenceService(this.vertx);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        BrokerFiller brokerFiller = new BrokerFillerMissingField(this.vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        int msgCount = DataHelper.getJsonObjectCount("accountMargin", 1);
        testAppender.waitForMessageCount(Level.ERROR, msgCount);
        testAppender.waitForMessageContains(Level.ERROR, "Unable to create Data Model from GPB data");
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        rootLogger.addAppender(stdout);

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }


    @Test
    public void testMessageStoreError(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        ErrorPersistenceService persistenceService = new ErrorPersistenceService();
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        BrokerFiller brokerFiller = new BrokerFillerCorrectData(vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        // Catch log messages generated by AccountMarginVerticle
        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.ERROR, "Unable to store message");
        testAppender.waitForMessageContains(Level.WARN, "Message released");
        testAppender.stop();
        rootLogger.addAppender(stdout);

        brokerFiller.drainAccountMarginQueue(context.async(1), context.asyncAssertSuccess());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testCircuitBreaker(TestContext context) throws InterruptedException {
        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());

        Async async = context.async(1);

        PersistenceService persistenceService = new CircuitBreakerPersistenceService(async, 1);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        BrokerFiller brokerFiller = new BrokerFillerCorrectData(vertx);
        brokerFiller.setUpAccountMarginQueue(context.asyncAssertSuccess());

        Appender<ILoggingEvent> stdout = rootLogger.getAppender("STDOUT");
        rootLogger.detachAppender(stdout);
        testAppender.start();
        vertx.deployVerticle(AccountMarginVerticle.class.getName(), deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.WARN, "Open circuit");
        testAppender.waitForMessageContains(Level.WARN, "Message released");
        testAppender.waitForMessageContains(Level.WARN, "Half open circuit");
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.waitForMessageContains(Level.WARN, "Close circuit");
        testAppender.stop();
        rootLogger.addAppender(stdout);

        async.awaitSuccess(30000);

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }

    @Test
    public void testAccountMarginVerticle(TestContext context) throws InterruptedException {
        testVerticle(context, AccountMarginVerticle.class.getName(), DataHelper.ACCOUNT_MARGIN_FOLDER,
                new BrokerFillerCorrectData(vertx)::setUpAccountMarginQueue,
                DataHelper::createAccountMarginModelFromJson);
    }

    @Test
    public void testLiquiGroupMarginVerticle(TestContext context) throws InterruptedException {
        testVerticle(context, LiquiGroupMarginVerticle.class.getName(), DataHelper.LIQUI_GROUP_MARGIN_FOLDER,
                new BrokerFillerCorrectData(vertx)::setUpLiquiGroupMarginQueue,
                DataHelper::createLiquiGroupMarginModelFromJson);
    }

    @Test
    public void testLiquiGroupSplitMarginVerticle(TestContext context) throws InterruptedException {
        testVerticle(context, LiquiGroupSplitMarginVerticle.class.getName(), DataHelper.LIQUI_GROUP_SPLIT_MARGIN_FOLDER,
                new BrokerFillerCorrectData(vertx)::setUpLiquiGroupSplitMarginQueue,
                DataHelper::createLiquiGroupSplitMarginModelFromJson);
    }

    @Test
    public void testPoolMarginVerticle(TestContext context) throws InterruptedException {
        testVerticle(context, PoolMarginVerticle.class.getName(), DataHelper.POOL_MARGIN_FOLDER,
                new BrokerFillerCorrectData(vertx)::setUpPoolMarginQueue,
                DataHelper::createPoolMarginModelFromJson);
    }

    @Test
    public void testPositionReportVerticle(TestContext context) throws InterruptedException {
        testVerticle(context, PositionReportVerticle.class.getName(), DataHelper.POSITION_REPORT_FOLDER,
                new BrokerFillerCorrectData(vertx)::setUpPositionReportQueue,
                DataHelper::createPositionReportModelFromJson);
    }

    @Test
    public void testRiskLimitUtilizationVerticle(TestContext context) throws InterruptedException {
        testVerticle(context, RiskLimitUtilizationVerticle.class.getName(), DataHelper.RISK_LIMIT_UTILIZATION_FOLDER,
                new BrokerFillerCorrectData(vertx)::setUpRiskLimitUtilizationQueue,
                DataHelper::createRiskLimitUtilizationModelFromJson);
    }

    private <T extends Model> void testVerticle(TestContext context, String verticleName, String dataFolder,
                                                Consumer<Handler<AsyncResult<String>>> filler, Function<JsonObject, T> modelFactory) throws InterruptedException {

        DeploymentOptions deploymentOptions = new DeploymentOptions().setConfig(TestConfig.getAmqpConfig());
        int msgCount = DataHelper.getJsonObjectCount(dataFolder, 1);
        Async async = context.async(msgCount);

        // Setup persistence persistence
        CountdownPersistenceService persistenceService = new CountdownPersistenceService(async);
        MessageConsumer<JsonObject> serviceMessageConsumer = ProxyHelper.registerService(PersistenceService.class, vertx, persistenceService, PersistenceService.SERVICE_ADDRESS);

        // Fill in the broker
        filler.accept(context.asyncAssertSuccess());

        testAppender.start();
        vertx.deployVerticle(verticleName, deploymentOptions, context.asyncAssertSuccess());
        testAppender.waitForMessageContains(Level.INFO, "Message settled");
        testAppender.stop();
        async.awaitSuccess(30000);

        // verify the content of the last message
        JsonObject jsonData = DataHelper.getLastJsonFromFile(dataFolder, 1).orElse(new JsonObject());
        MessageLite expected = modelFactory.apply(jsonData).toGrpc();
        context.assertEquals(expected, persistenceService.getLastModel().toGrpc());

        ProxyHelper.unregisterService(serviceMessageConsumer);
    }
}